// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	entity "go-match/internal/segmentation/entity"

	mock "github.com/stretchr/testify/mock"

	segmentation "go-match/internal/domain/segmentation"
)

// Segmentation is an autogenerated mock type for the Segmentation type
type Segmentation struct {
	mock.Mock
}

// CreateRegular provides a mock function with given fields: key, value, circleId
func (_m *Segmentation) CreateRegular(key string, value string, circleId string) error {
	ret := _m.Called(key, value, circleId)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string) error); ok {
		r0 = rf(key, value, circleId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateSimpleKV provides a mock function with given fields: _a0, circleId
func (_m *Segmentation) CreateSimpleKV(_a0 segmentation.Node, circleId string) error {
	ret := _m.Called(_a0, circleId)

	var r0 error
	if rf, ok := ret.Get(0).(func(segmentation.Node, string) error); ok {
		r0 = rf(_a0, circleId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindRegular provides a mock function with given fields:
func (_m *Segmentation) FindRegular() ([]entity.Segmentation, error) {
	ret := _m.Called()

	var r0 []entity.Segmentation
	if rf, ok := ret.Get(0).(func() []entity.Segmentation); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Segmentation)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindSimpleKV provides a mock function with given fields: key, value
func (_m *Segmentation) FindSimpleKV(key interface{}, value interface{}) ([]entity.Segmentation, error) {
	ret := _m.Called(key, value)

	var r0 []entity.Segmentation
	if rf, ok := ret.Get(0).(func(interface{}, interface{}) []entity.Segmentation); ok {
		r0 = rf(key, value)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Segmentation)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(interface{}, interface{}) error); ok {
		r1 = rf(key, value)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
